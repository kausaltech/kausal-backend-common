"""
This type stub file was generated by pyright.
"""

from functools import singledispatch
from django.db import models
from graphene import Field
from .compat import ArrayField, HStoreField, RangeField

class BlankValueField(Field):
    def wrap_resolve(self, parent_resolver): # -> _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any | None]:
        ...
    


def convert_choice_name(name): # -> str:
    ...

def get_choices(choices): # -> Generator[Any | tuple[str, Any, str], Any, None]:
    ...

def convert_choices_to_named_enum_with_descriptions(name, choices): # -> Any:
    class EnumWithDescriptionsType:
        ...
    
    

def generate_enum_name(django_model_meta, field): # -> Any | str:
    ...

def convert_choice_field_to_enum(field, name=...): # -> Any:
    ...

def convert_django_field_with_choices(field, registry=..., convert_choices_to_enum=...): # -> Any:
    ...

def get_django_field_description(field): # -> str | None:
    ...

@singledispatch
def convert_django_field(field, registry=...):
    ...

@convert_django_field.register(models.CharField)
@convert_django_field.register(models.TextField)
@convert_django_field.register(models.EmailField)
@convert_django_field.register(models.SlugField)
@convert_django_field.register(models.URLField)
@convert_django_field.register(models.GenericIPAddressField)
@convert_django_field.register(models.FileField)
@convert_django_field.register(models.FilePathField)
def convert_field_to_string(field, registry=...): # -> String:
    ...

@convert_django_field.register(models.BigAutoField)
@convert_django_field.register(models.AutoField)
def convert_field_to_id(field, registry=...): # -> ID:
    ...

if hasattr(models, "SmallAutoField"):
    @convert_django_field.register(models.SmallAutoField)
    def convert_field_small_to_id(field, registry=...):
        ...
    
@convert_django_field.register(models.UUIDField)
def convert_field_to_uuid(field, registry=...): # -> UUID:
    ...

@convert_django_field.register(models.BigIntegerField)
def convert_big_int_field(field, registry=...):
    ...

@convert_django_field.register(models.PositiveIntegerField)
@convert_django_field.register(models.PositiveSmallIntegerField)
@convert_django_field.register(models.SmallIntegerField)
@convert_django_field.register(models.IntegerField)
def convert_field_to_int(field, registry=...): # -> Int:
    ...

@convert_django_field.register(models.NullBooleanField)
@convert_django_field.register(models.BooleanField)
def convert_field_to_boolean(field, registry=...): # -> Boolean:
    ...

@convert_django_field.register(models.DecimalField)
def convert_field_to_decimal(field, registry=...): # -> Decimal:
    ...

@convert_django_field.register(models.FloatField)
@convert_django_field.register(models.DurationField)
def convert_field_to_float(field, registry=...): # -> Float:
    ...

@convert_django_field.register(models.DateTimeField)
def convert_datetime_to_string(field, registry=...): # -> DateTime:
    ...

@convert_django_field.register(models.DateField)
def convert_date_to_string(field, registry=...): # -> Date:
    ...

@convert_django_field.register(models.TimeField)
def convert_time_to_string(field, registry=...): # -> Time:
    ...

@convert_django_field.register(models.OneToOneRel)
def convert_onetoone_field_to_djangomodel(field, registry=...): # -> Dynamic:
    ...

@convert_django_field.register(models.ManyToManyField)
@convert_django_field.register(models.ManyToManyRel)
@convert_django_field.register(models.ManyToOneRel)
def convert_field_to_list_or_connection(field, registry=...): # -> Dynamic:
    ...

@convert_django_field.register(models.OneToOneField)
@convert_django_field.register(models.ForeignKey)
def convert_field_to_djangomodel(field, registry=...): # -> Dynamic:
    ...

@convert_django_field.register(ArrayField)
def convert_postgres_array_to_list(field, registry=...): # -> List:
    ...

@convert_django_field.register(HStoreField)
@convert_django_field.register(models.JSONField)
def convert_json_field_to_string(field, registry=...): # -> JSONString:
    ...

@convert_django_field.register(RangeField)
def convert_postgres_range_to_string(field, registry=...): # -> List:
    ...

