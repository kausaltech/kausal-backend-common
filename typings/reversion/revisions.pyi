from datetime import datetime
from typing import Any, Callable, ContextManager, Iterable, TypeVar, overload

from django.contrib.auth.models import AbstractBaseUser
from django.db import models

def is_active() -> bool: ...
def is_manage_manually() -> bool: ...
def set_user(user: AbstractBaseUser | None) -> None: ...
def get_user() -> AbstractBaseUser | None: ...
def set_comment(comment: str) -> None: ...
def get_comment() -> str: ...
def set_date_created(date_created: datetime) -> None: ...
def get_date_created() -> datetime: ...
def add_meta(model: type[models.Model], **values: Any) -> None: ...  # noqa: ANN401
def add_to_revision(obj: models.Model, model_db: str | None = None) -> None: ...
def create_revision(manage_manually: bool = False, using: str | None = None, atomic: bool = True) -> _ContextWrapper: ...

class _ContextWrapper:
    def __init__(self, func: Callable[..., ContextManager], args: tuple[Any, ...]) -> None: ...
    def __enter__(self) -> Any: ...  # noqa: ANN401
    def __exit__(
        self, exc_type: type[BaseException] | None, exc_value: BaseException | None, traceback: Any | None,  # noqa: ANN401, PYI036
    ) -> bool | None: ...
    def __call__(self, func: Callable[..., Any]) -> Callable[..., Any]: ...

def is_registered(model: type[models.Model]) -> bool: ...
def get_registered_models() -> Iterable[type[models.Model]]: ...

_M = TypeVar('_M', bound=type[models.Model])

@overload
def register(
    model: None = None,
    fields: Iterable[str] | None = None,
    exclude: Iterable[str] = (),
    follow: Iterable[str] = (),
    format: str = 'json',
    for_concrete_model: bool = True,
    ignore_duplicates: bool = False,
    use_natural_foreign_keys: bool = False,
) -> Callable[[_M], _M]: ...

@overload
def register(
    model: _M,
    fields: Iterable[str] | None = None,
    exclude: Iterable[str] = (),
    follow: Iterable[str] = (),
    format: str = 'json',
    for_concrete_model: bool = True,
    ignore_duplicates: bool = False,
    use_natural_foreign_keys: bool = False,
) -> _M: ...


def unregister(model: type[models.Model]) -> None: ...
