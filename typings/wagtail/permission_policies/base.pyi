from typing import Generic, Literal, Sequence, TypeVar

from django.contrib.auth.models import AbstractUser
from django.db.models import Model, QuerySet
from django.utils.functional import cached_property as cached_property
from wagtail.coreutils import resolve_model_string as resolve_model_string

M = TypeVar('M', bound=Model)
QS = TypeVar('QS', bound=QuerySet)
U = TypeVar('U', bound=AbstractUser)
UserQS = TypeVar('UserQS', bound=QuerySet)

type ActionType = Literal['add', 'change', 'delete'] | str


class BasePermissionPolicy(Generic[M, QS, U, UserQS]):
    permission_cache_name: str
    def __init__(self, model: type[M] | str) -> None: ...
    @cached_property
    def model(self) -> type[M]: ...
    def check_model(self, model: type[M]) -> None: ...
    def get_all_permissions_for_user(self, user: U): ...
    def get_cached_permissions_for_user(self, user: U): ...
    def user_has_permission(self, user: U, action: ActionType) -> bool: ...
    def user_has_any_permission(self, user: U, actions: Sequence[ActionType]) -> bool: ...
    def users_with_any_permission(self, actions: Sequence[ActionType]) -> UserQS: ...
    def users_with_permission(self, action: ActionType) -> UserQS: ...
    def user_has_permission_for_instance(self, user: U, action: ActionType, instance: M) -> bool: ...
    def user_has_any_permission_for_instance(self, user: U, actions: Sequence[ActionType], instance: M) -> bool: ...
    def instances_user_has_any_permission_for(self, user: U, actions: Sequence[ActionType]) -> QS: ...
    def instances_user_has_permission_for(self, user: U, action: ActionType) -> QS: ...
    def users_with_any_permission_for_instance(self, actions: Sequence[ActionType], instance: M) -> UserQS: ...
    def users_with_permission_for_instance(self, action: ActionType, instance: M) -> UserQS: ...

class BlanketPermissionPolicy(BasePermissionPolicy[M, QS, U, UserQS]): ...

class AuthenticationOnlyPermissionPolicy(BasePermissionPolicy[M, QS, U, UserQS]): ...

class BaseDjangoAuthPermissionPolicy(BasePermissionPolicy[M, QS, U, UserQS]):
    def __init__(self, model: type[M], auth_model: type[Model] | None = None): ...
    @cached_property
    def auth_model(self) -> type[M]: ...
    @cached_property
    def app_label(self) -> str: ...
    @cached_property
    def model_name(self) -> str: ...

class ModelPermissionPolicy(BaseDjangoAuthPermissionPolicy[M, QS, U, UserQS]):
    ...

class OwnershipPermissionPolicy(BaseDjangoAuthPermissionPolicy[M, QS, U, UserQS]):
    owner_field_name: str
    def __init__(self, model: type[M], auth_model: type[Model] | None = None, owner_field_name: str = 'owner'): ...
    def check_model(self, model: type[M] | str) -> None: ...
