from .base import Block, BoundBlock
from _typeshed import Incomplete
from collections.abc import Generator, MutableSequence
from django.core.exceptions import ValidationError
from django.utils.functional import cached_property
from wagtail.telepath import Adapter

__all__ = ['ListBlock', 'ListBlockValidationError']

class ListBlockValidationError(ValidationError):
    non_block_errors: Incomplete
    block_errors: Incomplete
    def __init__(self, block_errors: Incomplete | None = None, non_block_errors: Incomplete | None = None) -> None: ...
    def as_json_data(self): ...

class ListValue(MutableSequence):
    """
    The native data type used by ListBlock. Behaves as a list of values, but also provides
    a bound_blocks property giving access to block IDs
    """
    class ListChild(BoundBlock):
        original_id: Incomplete
        id: Incomplete
        def __init__(self, *args, **kwargs) -> None: ...
        def get_prep_value(self): ...
    list_block: Incomplete
    bound_blocks: Incomplete
    def __init__(self, list_block, values: Incomplete | None = None, bound_blocks: Incomplete | None = None) -> None: ...
    def __getitem__(self, i): ...
    def __setitem__(self, i, item) -> None: ...
    def __delitem__(self, i) -> None: ...
    def __len__(self) -> int: ...
    def insert(self, i, item) -> None: ...

class ListBlock(Block):
    search_index: Incomplete
    child_block: Incomplete
    def __init__(self, child_block, search_index: bool = True, **kwargs) -> None: ...
    @classmethod
    def construct_from_lookup(cls, lookup, *args, **kwargs): ...
    def value_from_datadict(self, data, files, prefix): ...
    def value_omitted_from_data(self, data, files, prefix): ...
    def clean(self, value): ...
    def normalize(self, value): ...
    def empty_value(self): ...
    def to_python(self, value): ...
    def bulk_to_python(self, values): ...
    def get_prep_value(self, value): ...
    def get_form_state(self, value): ...
    def get_api_representation(self, value, context: Incomplete | None = None): ...
    def render_basic(self, value, context: Incomplete | None = None): ...
    def get_searchable_content(self, value): ...
    def extract_references(self, value) -> Generator[Incomplete]: ...
    def get_block_by_content_path(self, value, path_elements):
        """
        Given a list of elements from a content path, retrieve the block at that path
        as a BoundBlock object, or None if the path does not correspond to a valid block.
        """
    def check(self, **kwargs): ...
    def deconstruct_with_lookup(self, lookup): ...
    class Meta:
        icon: str
        form_classname: Incomplete
        min_num: Incomplete
        max_num: Incomplete
        collapsed: bool
    MUTABLE_META_ATTRIBUTES: Incomplete

class ListBlockAdapter(Adapter):
    js_constructor: str
    def js_args(self, block): ...
    @cached_property
    def media(self): ...
