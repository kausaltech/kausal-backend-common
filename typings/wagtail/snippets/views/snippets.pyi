from typing import Any, ClassVar, Generic, TypedDict, TypeVar

from django.db.models import Model, QuerySet
from django.forms import BaseModelForm
from django.http import HttpResponse
from django.http.request import HttpRequest
from django.urls import URLPattern
from django.utils.functional import cached_property
from wagtail.admin.forms import WagtailAdminModelForm
from wagtail.admin.panels import ObjectList, TabbedInterface
from wagtail.admin.ui.components import MediaContainer
from wagtail.admin.views import generic
from wagtail.admin.views.generic import base, history, lock, mixins, models as generic_models, preview, workflow
from wagtail.admin.viewsets.model import ModelViewSet
from wagtail.snippets.views.chooser import SnippetChooserViewSet

def get_snippet_model_from_url_params(app_name: str, model_name: str) -> type[Model]: ...


_ModelT = TypeVar('_ModelT', bound=Model, default=Model, covariant=True)
_QS = TypeVar('_QS', bound=QuerySet[Any, Any], default=QuerySet[_ModelT])
_FormT = TypeVar('_FormT', bound=BaseModelForm[Any], default=WagtailAdminModelForm[_ModelT], covariant=True)


class SnippetType(TypedDict):
    name: str
    count: int
    model: type[Model]

class ModelIndexView[M: Model](base.BaseListingView[M]):
    snippet_types: list[SnippetType]
    def get_list_url(self, _type: dict[str, Any]) -> str: ...
    def get_context_data(self, **kwargs: Any) -> dict[str, Any]: ...
    def get_template_names(self) -> list[str]: ...


class IndexView(Generic[_ModelT, _QS], mixins.IndexViewOptionalFeaturesMixin, generic_models.IndexView[_ModelT]):
    view_name: ClassVar[str]
    def get_base_queryset(self) -> _QS: ...


class CreateView(
    mixins.CreateEditViewOptionalFeaturesMixin[_ModelT, _FormT], generic_models.CreateView[_ModelT, _FormT],
):
    view_name: ClassVar[str]
    def run_before_hook(self) -> HttpResponse | None: ...
    def run_after_hook(self) -> HttpResponse | None: ...
    def get_side_panels(self) -> MediaContainer: ...
    def get_context_data(self, **kwargs: Any) -> dict[str, Any]: ...

class CopyView(generic.CopyViewMixin[_ModelT], CreateView[_ModelT, _FormT]): ...

class EditView(generic.CreateEditViewOptionalFeaturesMixin[_ModelT, _FormT], generic.EditView[_ModelT, _FormT]):
    view_name: ClassVar[str]
    def run_before_hook(self) -> HttpResponse | None: ...
    def run_after_hook(self) -> HttpResponse | None: ...
    def get_side_panels(self) -> Any: ...
    def get_context_data(self, **kwargs: Any) -> dict[str, Any]: ...


class DeleteView(generic.DeleteView):
    view_name: ClassVar[str]
    def run_before_hook(self) -> HttpResponse | None: ...
    def run_after_hook(self) -> HttpResponse | None: ...

class UsageView(generic.UsageView):
    view_name: ClassVar[str]

class HistoryView(history.HistoryView):
    view_name: ClassVar[str]

class InspectView(generic.InspectView):
    view_name: ClassVar[str]

class PreviewOnCreateView(preview.PreviewOnCreate): ...
class PreviewOnEditView(preview.PreviewOnEdit): ...

class PreviewRevisionView(generic.PermissionCheckedMixin, preview.PreviewRevision):
    ...


class RevisionsCompareView(generic.PermissionCheckedMixin, generic.RevisionsCompareView):
    ...

class UnpublishView(generic.PermissionCheckedMixin, generic.UnpublishView):
    ...

class RevisionsUnscheduleView(generic.PermissionCheckedMixin, generic.RevisionsUnscheduleView):
    ...

class LockView(generic.PermissionCheckedMixin, lock.LockView):
    def user_has_permission(self, permission: str) -> bool: ...

class UnlockView(generic.PermissionCheckedMixin, lock.UnlockView):
    def user_has_permission(self, permission: str) -> bool: ...

class WorkflowActionView(workflow.WorkflowAction): ...
class CollectWorkflowActionDataView(workflow.CollectWorkflowActionData): ...
class ConfirmWorkflowCancellationView(workflow.ConfirmWorkflowCancellation): ...
class WorkflowPreviewView(workflow.PreviewRevisionForTask): ...

class WorkflowHistoryView(generic.PermissionCheckedMixin, history.WorkflowHistoryView):
    ...

class WorkflowHistoryDetailView(generic.PermissionCheckedMixin, history.WorkflowHistoryDetailView):
    ...

class SnippetViewSet(Generic[_ModelT, _FormT], ModelViewSet[_ModelT, _FormT]):
    model: type[_ModelT]
    chooser_per_page: ClassVar[int]
    admin_url_namespace: ClassVar[str | None]
    base_url_path: ClassVar[str | None]
    chooser_admin_url_namespace: ClassVar[str | None]
    chooser_base_url_path: ClassVar[str | None]
    index_view_class: ClassVar[type[IndexView[_ModelT, Any]]]  # type: ignore[misc]
    add_view_class: ClassVar[type[CreateView[_ModelT, _FormT]]]  # type: ignore[misc]
    copy_view_class: ClassVar[type[CopyView[_ModelT]]]  # type: ignore[misc,assignment]
    edit_view_class: ClassVar[type[EditView[_ModelT, _FormT]]]  # type: ignore[misc]
    delete_view_class: ClassVar[type[DeleteView]]
    usage_view_class: ClassVar[type[UsageView]]
    history_view_class: ClassVar[type[HistoryView]]
    inspect_view_class: ClassVar[type[InspectView]]
    revisions_view_class: ClassVar[type[PreviewRevisionView]]
    revisions_compare_view_class: ClassVar[type[RevisionsCompareView]]
    revisions_unschedule_view_class: ClassVar[type[RevisionsUnscheduleView]]
    unpublish_view_class: ClassVar[type[UnpublishView]]
    preview_on_add_view_class: ClassVar[type[PreviewOnCreateView]]
    preview_on_edit_view_class: ClassVar[type[PreviewOnEditView]]
    lock_view_class: ClassVar[type[LockView]]
    unlock_view_class: ClassVar[type[UnlockView]]
    workflow_action_view_class: ClassVar[type[WorkflowActionView]]
    collect_workflow_action_data_view_class: ClassVar[type[CollectWorkflowActionDataView]]
    confirm_workflow_cancellation_view_class: ClassVar[type[ConfirmWorkflowCancellationView]]
    workflow_preview_view_class: ClassVar[type[WorkflowPreviewView]]
    workflow_history_view_class: ClassVar[type[WorkflowHistoryView]]
    workflow_history_detail_view_class: ClassVar[type[WorkflowHistoryDetailView]]
    chooser_viewset_class: ClassVar[type[SnippetChooserViewSet]]
    template_prefix: ClassVar[str]
    model_opts: Any
    app_label: str
    model_name: str
    preview_enabled: bool
    revision_enabled: bool
    draftstate_enabled: bool
    workflow_enabled: bool
    locking_enabled: bool
    menu_item_is_registered: bool

    def __init__(self, **kwargs: Any) -> None: ...

    @cached_property
    def url_prefix(self) -> str: ...

    @cached_property
    def url_namespace(self) -> str: ...

    @property
    def revisions_revert_view_class(self) -> type[Any]: ...
    def get_common_view_kwargs(self, **kwargs: Any) -> dict[str, Any]: ...
    def get_index_view_kwargs(self, **kwargs: Any) -> dict[str, Any]: ...
    def get_add_view_kwargs(self, **kwargs: Any) -> dict[str, Any]: ...
    def get_copy_view_kwargs(self, **kwargs: Any) -> dict[str, Any]: ...
    def get_edit_view_kwargs(self, **kwargs: Any) -> dict[str, Any]: ...
    @property
    def revisions_view(self) -> Any: ...
    @property
    def revisions_revert_view(self) -> Any: ...
    @property
    def revisions_compare_view(self) -> Any: ...
    @property
    def revisions_unschedule_view(self) -> Any: ...
    @property
    def unpublish_view(self) -> Any: ...
    @property
    def preview_on_add_view(self) -> Any: ...
    @property
    def preview_on_edit_view(self) -> Any: ...
    @property
    def lock_view(self) -> Any: ...
    @property
    def copy_view(self) -> Any: ...
    @property
    def unlock_view(self) -> Any: ...
    @property
    def workflow_action_view(self) -> Any: ...
    @property
    def collect_workflow_action_data_view(self) -> Any: ...
    @property
    def confirm_workflow_cancellation_view(self) -> Any: ...
    @property
    def workflow_preview_view(self) -> Any: ...
    @property
    def workflow_history_view(self) -> Any: ...
    @property
    def workflow_history_detail_view(self) -> Any: ...
    @property
    def redirect_to_usage_view(self) -> Any: ...
    @property
    def chooser_viewset(self) -> Any: ...
    icon: ClassVar[str]
    breadcrumbs_items: ClassVar[list[base.BreadcrumbItem]]
    def get_queryset(self, request: HttpRequest) -> QuerySet | None: ...
    def get_admin_url_namespace(self) -> str: ...
    def get_admin_base_path(self) -> str: ...
    def get_chooser_admin_url_namespace(self) -> str: ...
    def get_chooser_admin_base_path(self) -> str: ...
    @property
    def url_finder_class(self) -> type[Any]: ...
    def get_urlpatterns(self) -> list[URLPattern]: ...
    def get_edit_handler(self) -> ObjectList | TabbedInterface | None: ...
    def register_chooser_viewset(self) -> None: ...
    def register_model_check(self) -> None: ...
    def register_snippet_model(self) -> None: ...
    def on_register(self) -> None: ...

class SnippetViewSetGroup(ModelViewSet):
    def __init__(self) -> None: ...
