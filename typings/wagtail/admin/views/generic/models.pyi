from typing import Any, ClassVar, Dict, List, Optional, Tuple, Type, Union

from django.db.models import Model, QuerySet
from django.forms import BaseModelForm, Form
from django.http import HttpRequest, HttpResponse
from django.utils.functional import cached_property
from django.views.generic import TemplateView
from django.views.generic.edit import BaseCreateView, BaseDeleteView, BaseUpdateView
from wagtail.admin.filters import WagtailFilterSet
from wagtail.admin.forms.search import SearchForm
from wagtail.admin.panels import Panel
from wagtail.admin.ui.components import Component
from wagtail.admin.ui.tables import Column
from wagtail.admin.views.mixins import SpreadsheetExportMixin
from wagtail.admin.widgets.button import ButtonWithDropdown, HeaderButton, ListingButton
from wagtail.models import DraftStateMixin, ReferenceIndex
from wagtail.models.audit_log import ModelLogEntry

from .base import BaseListingView, WagtailAdminTemplateMixin
from .mixins import BeforeAfterHookMixin, HookResponseMixin, LocaleMixin, PanelMixin
from .permissions import PermissionCheckedMixin

class IndexView[M: Model, QS: QuerySet](SpreadsheetExportMixin, LocaleMixin, PermissionCheckedMixin, BaseListingView[M, QS]):
    model: type[M] | None
    add_url_name: ClassVar[str | None]
    edit_url_name: ClassVar[str | None]
    copy_url_name: ClassVar[str | None]
    inspect_url_name: ClassVar[str | None]
    delete_url_name: ClassVar[str | None]
    search_fields: ClassVar[list[str] | None]
    search_backend_name: ClassVar[str]
    is_searchable: ClassVar[bool | None]
    search_kwarg: ClassVar[str]
    list_display: ClassVar[list[str | Column]]
    list_filter: ClassVar[list[str] | None]
    show_other_searches: ClassVar[bool]
    add_url: ClassVar[str | None]

    search_url: str
    search_form: SearchForm | None
    is_searching: bool
    search_query: str | None
    header_buttons: ClassVar[list[HeaderButton]]
    add_item_label: ClassVar[str]

    def setup(self, request: HttpRequest, *args: Any, **kwargs: Any) -> None: ...
    def setup_search(self) -> None: ...
    def get_is_searchable(self) -> bool: ...
    def get_search_url(self) -> str | None: ...
    def get_search_form(self) -> SearchForm | None: ...
    def get_filterset_class(self) -> type[WagtailFilterSet] | None: ...
    def order_queryset(self, queryset: QS) -> QS: ...
    def get_queryset(self) -> QS: ...
    def search_queryset(self, queryset: QS) -> QS: ...
    def get_edit_url(self, instance: M) -> str | None: ...
    def get_copy_url(self, instance: M) -> str | None: ...
    def get_inspect_url(self, instance: M) -> str | None: ...
    def get_delete_url(self, instance: M) -> str | None: ...
    def get_add_url(self) -> str | None: ...
    def get_page_title(self) -> str: ...
    def get_breadcrumbs_items(self) -> list[dict[str, Any]]: ...
    def get_list_more_buttons(self, instance: M) -> list[ListingButton]: ...
    def get_list_buttons(self, instance: M) -> list[ButtonWithDropdown]: ...
    def get_context_data(self, *args: Any, **kwargs: Any) -> dict[str, Any]: ...
    def render_to_response(self, context: dict[str, Any], **response_kwargs: Any) -> HttpResponse: ...

type SuccessButton = tuple[str, str, bool]

class CreateView[M: Model, F: BaseModelForm](LocaleMixin, PanelMixin, PermissionCheckedMixin, BeforeAfterHookMixin, WagtailAdminTemplateMixin, BaseCreateView[M, F]): # pyright: ignore
    index_url_name: ClassVar[str | None]
    add_url_name: ClassVar[str | None]
    edit_url_name: ClassVar[str | None]
    success_message: ClassVar[str | None]
    error_message: ClassVar[str | None]
    submit_button_label: ClassVar[str]
    actions: ClassVar[list[str]]

    action: str
    form: Form

    def setup(self, request: HttpRequest, *args: Any, **kwargs: Any) -> None: ...
    def get_action(self, request: HttpRequest) -> str: ...
    def get_available_actions(self) -> list[str]: ...
    def get_page_subtitle(self) -> str: ...
    def get_breadcrumbs_items(self) -> list[dict[str, Any]]: ...
    def get_add_url(self) -> str: ...
    @cached_property
    def add_url(self) -> str: ...
    def get_edit_url(self) -> str: ...
    def get_success_url(self) -> str: ...
    def get_success_message(self, instance: M) -> str | None: ...
    def get_success_buttons(self) -> list[SuccessButton]: ...
    def get_error_message(self) -> str | None: ...
    def get_context_data(self, **kwargs: Any) -> dict[str, Any]: ...
    def get_side_panels(self) -> Component: ...
    def get_translations(self) -> list[dict[str, Any]]: ...
    def get_initial_form_instance(self) -> M | None: ...
    def get_form_kwargs(self) -> dict[str, Any]: ...
    def save_instance(self) -> M: ...
    def save_action(self) -> HttpResponse: ...
    def form_valid(self, form: F) -> HttpResponse: ...
    def form_invalid(self, form: F) -> HttpResponse: ...

class CopyViewMixin[M: Model]:
    def get_object(self, queryset: QuerySet | None = None) -> M: ...
    def get_initial_form_instance(self) -> M: ...

class CopyView[M: Model, F: BaseModelForm](CopyViewMixin[M], CreateView[M, F]): ...

class EditView[M: Model, F: BaseModelForm](
    LocaleMixin, PanelMixin, PermissionCheckedMixin, BeforeAfterHookMixin, WagtailAdminTemplateMixin, BaseUpdateView[M, F], # pyright: ignore
):
    index_url_name: ClassVar[str | None]
    edit_url_name: ClassVar[str | None]
    delete_url_name: ClassVar[str | None]
    history_url_name: ClassVar[str | None]
    usage_url_name: ClassVar[str | None]
    delete_item_label: ClassVar[str]
    success_message: ClassVar[str | None]
    error_message: ClassVar[str | None]
    submit_button_label: ClassVar[str]
    actions: ClassVar[list[str]]

    action: str
    form: F
    object: M
    has_content_changes: bool

    def setup(self, request: HttpRequest, *args: Any, **kwargs: Any) -> None: ...
    def get_action(self, request: HttpRequest) -> str: ...
    def get_available_actions(self) -> list[str]: ...
    def get_object(self, queryset: QuerySet[M] | None = None) -> M: ...
    def get_page_subtitle(self) -> str: ...
    def get_breadcrumbs_items(self) -> list[dict[str, Any]]: ...
    def get_side_panels(self) -> Component: ...
    def get_last_updated_info(self) -> ModelLogEntry | None: ...
    def get_edit_url(self) -> str: ...
    def get_delete_url(self) -> str | None: ...
    def get_history_url(self) -> str | None: ...
    def get_usage_url(self) -> str | None: ...
    def get_success_url(self) -> str: ...
    def get_translations(self) -> list[dict[str, Any]]: ...
    def get_form_kwargs(self) -> dict[str, Any]: ...
    def save_instance(self) -> M: ...
    def save_action(self) -> HttpResponse: ...
    def get_success_message(self) -> str | None: ...
    def get_success_buttons(self) -> list[SuccessButton]: ...
    def get_error_message(self) -> str | None: ...
    def get_context_data(self, **kwargs: Any) -> dict[str, Any]: ...


class DeleteView[M: Model](LocaleMixin, PanelMixin, PermissionCheckedMixin, BeforeAfterHookMixin, WagtailAdminTemplateMixin, BaseDeleteView):
    index_url_name: ClassVar[str | None]
    edit_url_name: ClassVar[str | None]
    delete_url_name: ClassVar[str | None]
    usage_url_name: ClassVar[str | None]
    page_title: ClassVar[str]
    success_message: ClassVar[str | None]

    object: M
    usage_url: str | None
    usage: ReferenceIndex | None

    def setup(self, request: HttpRequest, *args: Any, **kwargs: Any) -> None: ...
    def get_object(self, queryset: QuerySet | None = None) -> M: ...
    def get_usage(self) -> ReferenceIndex | None: ...
    def get_success_url(self) -> str: ...
    def get_page_subtitle(self) -> str: ...
    def get_breadcrumbs_items(self) -> list[dict[str, Any]]: ...
    def get_delete_url(self) -> str: ...
    def get_usage_url(self) -> str | None: ...
    @property
    def confirmation_message(self) -> str: ...
    def get_success_message(self) -> str | None: ...
    def delete_action(self) -> None: ...
    def form_valid(self, form: Form) -> HttpResponse: ...
    def get_context_data(self, **kwargs: Any) -> dict[str, Any]: ...

class InspectView[M: Model](PermissionCheckedMixin, WagtailAdminTemplateMixin, TemplateView):
    model: type[M] | None
    index_url_name: ClassVar[str | None]
    edit_url_name: ClassVar[str | None]
    delete_url_name: ClassVar[str | None]
    fields: ClassVar[list[str]]
    fields_exclude: ClassVar[list[str]]
    pk_url_kwarg: ClassVar[str]

    pk: Any
    object: M

    def setup(self, request: HttpRequest, *args: Any, **kwargs: Any) -> None: ...
    def get_object(self, queryset: QuerySet | None = None) -> M: ...
    def get_page_subtitle(self) -> str: ...
    def get_breadcrumbs_items(self) -> list[dict[str, Any]]: ...
    def get_fields(self) -> list[str]: ...
    def get_field_label(self, field_name: str, field: Any) -> str: ...
    def get_field_display_value(self, field_name: str, field: Any) -> Any: ...
    def get_context_for_field(self, field_name: str) -> dict[str, Any]: ...
    def get_fields_context(self) -> list[dict[str, Any]]: ...
    def get_edit_url(self) -> str | None: ...
    def get_delete_url(self) -> str | None: ...
    def get_context_data(self, **kwargs: Any) -> dict[str, Any]: ...


class RevisionsCompareView[M: Model](WagtailAdminTemplateMixin, TemplateView):
    edit_handler: ClassVar[Panel | None]
    edit_url_name: ClassVar[str | None]
    history_url_name: ClassVar[str | None]
    edit_label: ClassVar[str]
    history_label: ClassVar[str]
    model: type[M]

    pk: Any
    revision_id_a: str
    revision_id_b: str
    object: M

    def setup(self, request: HttpRequest, pk: Any, revision_id_a: str, revision_id_b: str, *args: Any, **kwargs: Any) -> None: ...
    def get_object(self, queryset: QuerySet | None = None) -> M: ...
    def get_edit_handler(self) -> Panel: ...
    def get_page_subtitle(self) -> str: ...
    def get_history_url(self) -> str | None: ...
    def get_edit_url(self) -> str | None: ...
    def get_context_data(self, **kwargs: Any) -> dict[str, Any]: ...


class UnpublishView[M: Model](HookResponseMixin, WagtailAdminTemplateMixin, TemplateView):
    model: type[M] | None
    index_url_name: ClassVar[str | None]
    edit_url_name: ClassVar[str | None]
    unpublish_url_name: ClassVar[str | None]
    usage_url_name: ClassVar[str | None]
    success_message: ClassVar[str | None]

    pk: Any
    object: M
    objects_to_unpublish: list[M]

    def setup(self, request: HttpRequest, pk: Any, *args: Any, **kwargs: Any) -> None: ...
    def dispatch(self, request: HttpRequest, *args: Any, **kwargs: Any) -> HttpResponse: ...
    def get_object(self, queryset: QuerySet[M] | None = None) -> M: ...
    def get_usage(self) -> ReferenceIndex: ...
    def get_objects_to_unpublish(self) -> list[M]: ...
    def get_object_display_title(self) -> str: ...
    def get_success_message(self) -> str | None: ...
    def get_success_buttons(self) -> list[Any]: ...
    def get_next_url(self) -> str: ...
    def get_unpublish_url(self) -> str: ...
    def get_usage_url(self) -> str | None: ...
    def unpublish(self) -> HttpResponse | None: ...
    def post(self, request: HttpRequest, *args: Any, **kwargs: Any) -> HttpResponse: ...
    def get_context_data(self, **kwargs: Any) -> dict[str, Any]: ...


class RevisionsUnscheduleView[M: DraftStateMixin](WagtailAdminTemplateMixin, TemplateView):
    model: type[M] | None
    edit_url_name: ClassVar[str | None]
    history_url_name: ClassVar[str | None]
    revisions_unschedule_url_name: ClassVar[str | None]
    success_message: ClassVar[str | None]

    pk: Any
    revision_id: str
    object: M
    revision: Any

    def setup(self, request: HttpRequest, pk: Any, revision_id: str, *args: Any, **kwargs: Any) -> None: ...
    def get_object(self, queryset: QuerySet[M] | None = None) -> M: ...
    def get_revision(self) -> Any: ...
    def get_revisions_unschedule_url(self) -> str: ...
    def get_object_display_title(self) -> str: ...
    def get_success_message(self) -> str | None: ...
    def get_success_buttons(self) -> list[SuccessButton]: ...
    def get_next_url(self) -> str: ...
    def get_page_subtitle(self) -> str: ...
    def get_context_data(self, **kwargs: Any) -> dict[str, Any]: ...
    def post(self, request: HttpRequest, *args: Any, **kwargs: Any) -> HttpResponse: ...
