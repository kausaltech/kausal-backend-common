from typing import Any, ClassVar, Dict, List, Optional, Type, Union
from django.db import models
from django.db.models import QuerySet, Model
from django.forms import BaseModelForm, Form
from django.http import HttpRequest, HttpResponse
from django.utils.safestring import SafeString
from wagtail.admin.panels import Panel
from wagtail.admin.ui.tables import Column
from wagtail.locks import BasicLock, ScheduledForPublishLock, WorkflowLock
from wagtail.models import Locale, WorkflowState

class HookResponseMixin:
    def run_hook(self, hook_name: str, *args: Any, **kwargs: Any) -> Optional[HttpResponse]: ...

class BeforeAfterHookMixin[F: BaseModelForm](HookResponseMixin):
    def run_before_hook(self) -> Optional[HttpResponse]: ...
    def run_after_hook(self) -> Optional[HttpResponse]: ...
    def dispatch(self, *args: Any, **kwargs: Any) -> HttpResponse: ...
    def form_valid(self, form: F) -> HttpResponse: ...

class LocaleMixin:
    locale: ClassVar[Optional[Locale]]
    translations: ClassVar[List[Dict[str, Any]]]
    def get_locale(self) -> Optional[Locale]: ...
    def get_translations(self) -> List[Dict[str, Any]]: ...
    def get_context_data(self, **kwargs: Any) -> Dict[str, Any]: ...

class PanelMixin[F: BaseModelForm]:
    panel: ClassVar[Optional[Panel]]
    def setup(self, request: HttpRequest, *args: Any, **kwargs: Any) -> None: ...
    def get_panel(self) -> Optional[Panel]: ...
    def get_bound_panel(self, form: Form) -> Panel.BoundPanel | None: ...
    def get_form_class(self) -> Type[F]: ...
    def get_context_data(self, **kwargs: Any) -> Dict[str, Any]: ...

class IndexViewOptionalFeaturesMixin[QS: QuerySet]:
    def _get_title_column(self, field_name: str, column_class: Type[Column] = ..., **kwargs: Any) -> Column: ...
    def _annotate_queryset_updated_at(self, queryset: QS) -> QS: ...

class CreateEditViewOptionalFeaturesMixin[M: Model, QS: QuerySet, F: BaseModelForm]:
    view_name: ClassVar[str]
    preview_url_name: ClassVar[Optional[str]]
    lock_url_name: ClassVar[Optional[str]]
    unlock_url_name: ClassVar[Optional[str]]
    revisions_unschedule_url_name: ClassVar[Optional[str]]
    revisions_compare_url_name: ClassVar[Optional[str]]
    workflow_history_url_name: ClassVar[Optional[str]]
    confirm_workflow_cancellation_url_name: ClassVar[Optional[str]]

    request: HttpRequest
    args: Any
    kwargs: Any
    preview_enabled: bool
    revision_enabled: bool
    draftstate_enabled: bool
    locking_enabled: bool
    lock: Optional[Union[BasicLock, ScheduledForPublishLock, WorkflowLock]]
    locked_for_user: bool

    workflow: ClassVar[Optional[Any]]
    workflow_enabled: ClassVar[bool]
    workflow_state: ClassVar[Optional[WorkflowState]]
    current_workflow_task: ClassVar[Optional[Any]]
    workflow_tasks: ClassVar[List[Any]]

    def setup(self, request: HttpRequest, *args: Any, **kwargs: Any) -> None: ...
    def user_has_permission(self, permission: str) -> bool: ...
    def workflow_action_is_valid(self) -> bool: ...
    def get_available_actions(self) -> List[str]: ...
    def get_lock(self) -> Optional[Union[BasicLock, ScheduledForPublishLock, WorkflowLock]]: ...
    def get_lock_url(self) -> Optional[str]: ...
    def get_unlock_url(self) -> Optional[str]: ...
    def get_preview_url(self) -> Optional[str]: ...
    def get_workflow_history_url(self) -> Optional[str]: ...
    def get_confirm_workflow_cancellation_url(self) -> Optional[str]: ...
    def get_error_message(self) -> str: ...
    def get_success_message(self, instance: Optional[M] = None) -> str: ...
    def get_success_url(self) -> str: ...
    def save_instance(self) -> M: ...
    def publish_action(self) -> Optional[HttpResponse]: ...
    def submit_action(self) -> None: ...
    def restart_workflow_action(self) -> None: ...
    def cancel_workflow_action(self) -> None: ...
    def workflow_action_action(self) -> None: ...
    def run_action_method(self) -> Optional[HttpResponse]: ...
    def form_valid(self, form: F) -> HttpResponse: ...
    def form_invalid(self, form: F) -> HttpResponse: ...
    def get_last_updated_info(self) -> Optional[Dict[str, Any]]: ...
    def get_lock_context(self) -> Dict[str, Any]: ...
    def get_context_data(self, **kwargs: Any) -> Dict[str, Any]: ...
    def post(self, request: HttpRequest, *args: Any, **kwargs: Any) -> HttpResponse: ...

class RevisionsRevertMixin:
    revision_id_kwarg: ClassVar[str]
    revisions_revert_url_name: ClassVar[Optional[str]]
    revision_id: str
    revision: Any

    def setup(self, request: HttpRequest, *args: Any, **kwargs: Any) -> None: ...
    def get(self, request: HttpRequest, *args: Any, **kwargs: Any) -> HttpResponse: ...
    def get_revisions_revert_url(self) -> str: ...
    def get_warning_message(self) -> SafeString: ...
    def _add_warning_message(self) -> None: ...
    def get_object(self, queryset: Optional[models.QuerySet] = None) -> Any: ...
    def save_instance(self) -> Any: ...
    def get_success_message(self) -> str: ...
    def get_context_data(self, **kwargs: Any) -> Dict[str, Any]: ...
