from typing import Any, ClassVar, Dict, List, NamedTuple, Optional, Tuple, Type, Union
from django.db import models
from django.db.models import Model, QuerySet
from django.db.models.options import Options
from django.http import HttpRequest
from django.utils.functional import cached_property
from django.views import View
from django.views.generic.base import ContextMixin, TemplateResponseMixin
from django.views.generic.list import BaseListView
from wagtail.admin.filters import WagtailFilterSet
from wagtail.admin.ui.tables import Column, Table
from wagtail.admin.widgets import Button


class WagtailAdminTemplateMixin(TemplateResponseMixin, ContextMixin):
    page_title: ClassVar[str]
    page_subtitle: ClassVar[str]
    header_icon: ClassVar[str]
    _show_breadcrumbs: bool
    breadcrumbs_items: ClassVar[List[Dict[str, Any]]]
    template_name: str
    header_buttons: ClassVar[List[Button]]
    header_more_buttons: List[Any]

    def get_page_title(self) -> str: ...
    def get_page_subtitle(self) -> str: ...
    def get_header_title(self) -> str: ...
    def get_header_icon(self) -> str: ...
    def get_breadcrumbs_items(self) -> List[Dict[str, Any]]: ...
    def get_header_buttons(self) -> List[Any]: ...
    def get_header_more_buttons(self) -> List[Any]: ...
    def get_context_data(self, **kwargs: Any) -> Dict[str, Any]: ...
    def get_template_names(self) -> List[str]: ...


class BaseObjectMixin[M: Model, QS: QuerySet]:
    model: Optional[Type[M]]
    pk_url_kwarg: str
    pk: Any
    object: M
    model_opts: Options[M]

    def setup(self, request: HttpRequest, *args: Any, **kwargs: Any) -> None: ...
    def get_pk(self) -> Any: ...
    def get_base_object_queryset(self) -> QS: ...
    def get_object(self) -> M: ...


class BaseOperationView[M: Model, QS: QuerySet](BaseObjectMixin[M, QS], View):
    success_message: Optional[str]
    success_message_extra_tags: str
    success_url_name: Optional[str]
    next_url: Optional[str]

    def setup(self, request: HttpRequest, *args: Any, **kwargs: Any) -> None: ...
    def perform_operation(self) -> None: ...
    def get_success_message(self) -> Optional[str]: ...
    def add_success_message(self) -> None: ...
    def get_success_url(self) -> str: ...
    def post(self, request: HttpRequest, *args: Any, **kwargs: Any) -> Any: ...


class ActiveFilter(NamedTuple):
    auto_id: str
    field_label: str
    value: Any
    removed_filter_url: str


class BaseListingView[M: Model, QS: QuerySet](WagtailAdminTemplateMixin, BaseListView[M]): # pyright: ignore
    template_name: str
    results_template_name: str
    results_only: bool
    table_class: Type[Table]
    table_classname: Optional[str]
    columns: List[Column]
    index_url_name: ClassVar[Optional[str]]
    index_results_url_name: Optional[str]
    page_kwarg: str
    default_ordering: ClassVar[Optional[str]]
    filterset_class: Type[WagtailFilterSet]
    filters: Optional[WagtailFilterSet]

    def get_template_names(self) -> List[str]: ...
    @cached_property
    def is_filtering(self) -> bool: ...
    def get_filterset_kwargs(self) -> Dict[str, Any]: ...
    def filter_queryset(self, queryset: QS) -> QS: ...
    def get_url_without_filter_param(self, param: Union[str, List[str], Tuple[str, ...]]) -> str: ...
    def get_url_without_filter_param_value(self, param: str, value: Any) -> str: ...
    @cached_property
    def active_filters(self) -> List[ActiveFilter]: ...
    def get_valid_orderings(self) -> List[str]: ...
    @cached_property
    def is_explicitly_ordered(self) -> bool: ...
    def get_ordering(self) -> Optional[str]: ...
    def order_queryset(self, queryset: QS) -> QS: ...
    def get_base_queryset(self) -> QS: ...
    def get_queryset(self) -> QS: ...
    def get_table_kwargs(self) -> Dict[str, Any]: ...
    def get_table(self, object_list: List[Any]) -> Table: ...
    @cached_property
    def index_url(self) -> Optional[str]: ...
    def get_index_url(self) -> Optional[str]: ...
    @cached_property
    def index_results_url(self) -> Optional[str]: ...
    def get_index_results_url(self) -> Optional[str]: ...
    def get_context_data(self, *args: Any, **kwargs: Any) -> Dict[str, Any]: ...