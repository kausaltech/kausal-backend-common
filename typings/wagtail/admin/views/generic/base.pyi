from typing import Any, Callable, ClassVar, Generic, NamedTuple, NotRequired, Sequence, TypedDict
from typing_extensions import TypeVar

from django.db.models import Model, QuerySet
from django.db.models.options import Options
from django.http import HttpRequest
from django.utils.functional import cached_property
from django.views import View
from django.views.generic.base import ContextMixin, TemplateResponseMixin
from django.views.generic.list import BaseListView
from django_stubs_ext import StrOrPromise
from wagtail.admin.filters import WagtailFilterSet
from wagtail.admin.ui.tables import Column, Table
from wagtail.admin.widgets import Button

_Model = TypeVar('_Model', bound=Model, default=Model, covariant=True)
_PKT = TypeVar('_PKT', default=Any)


class BreadcrumbItem(TypedDict):
    url: StrOrPromise
    label: StrOrPromise
    sublabel: NotRequired[StrOrPromise]


class WagtailAdminTemplateMixin(TemplateResponseMixin, ContextMixin):
    page_title: ClassVar[StrOrPromise]
    page_subtitle: ClassVar[StrOrPromise]
    header_icon: ClassVar[str]
    _show_breadcrumbs: bool
    breadcrumbs_items: ClassVar[Sequence[BreadcrumbItem]]
    template_name: str
    header_buttons: ClassVar[Sequence[Button]]
    header_more_buttons: ClassVar[Sequence[Button]]

    def get_page_title(self) -> StrOrPromise: ...
    def get_page_subtitle(self) -> StrOrPromise: ...
    def get_header_title(self) -> StrOrPromise: ...
    def get_header_icon(self) -> str: ...
    def get_breadcrumbs_items(self) -> Sequence[BreadcrumbItem]: ...
    def get_header_buttons(self) -> list[Any]: ...
    def get_header_more_buttons(self) -> list[Any]: ...
    def get_template_names(self) -> list[str]: ...




class BaseObjectMixin(Generic[_Model, _PKT]):
    # model: type[ModelT]
    pk_url_kwarg: str
    pk: _PKT
    object: _Model
    model_opts: Options[_Model]

    def get_pk(self) -> _PKT: ...
    def get_base_object_queryset(self) -> QuerySet: ...
    def get_object(self) -> _Model: ...

class BaseOperationView(BaseObjectMixin, View):
    success_message: str | None
    success_message_extra_tags: str
    success_url_name: str | None
    next_url: str | None
    request: HttpRequest

    def perform_operation(self) -> None: ...
    def get_success_message(self) -> str | None: ...
    def add_success_message(self) -> None: ...
    def get_success_url(self) -> str: ...
    def post(self, request: HttpRequest, *args: Any, **kwargs: Any) -> Any: ...

class ActiveFilter(NamedTuple):
    auto_id: str
    field_label: str
    value: Any
    removed_filter_url: str

class BaseListingView(WagtailAdminTemplateMixin, BaseListView[_Model]):  # type: ignore[type-var]
    results_template_name: str
    results_only: bool
    table_class: type[Table]
    table_classname: str | None
    columns: Sequence[Column]
    index_url_name: ClassVar[str | None]
    index_results_url_name: str | None
    page_kwarg: str
    default_ordering: ClassVar[str | None]
    filterset_class: type[WagtailFilterSet]
    filters: WagtailFilterSet | None

    def get_template_names(self) -> list[str]: ...
    @cached_property
    def is_filtering(self) -> bool: ...
    def get_filterset_kwargs(self) -> dict[str, Any]: ...
    def filter_queryset[QS: QuerySet](self, queryset: QS) -> QS: ...
    def get_url_without_filter_param(self, param: str | list[str] | tuple[str, ...]) -> str: ...
    def get_url_without_filter_param_value(self, param: str, value: Any) -> str: ...
    @cached_property
    def active_filters(self) -> list[ActiveFilter]: ...
    def get_valid_orderings(self) -> list[str]: ...
    @cached_property
    def is_explicitly_ordered(self) -> bool: ...
    def get_ordering(self) -> str | None: ...
    def order_queryset[QS: QuerySet](self, queryset: QS) -> QS: ...
    def get_queryset(self) -> QuerySet: ...
    def get_table_kwargs(self) -> dict[str, Any]: ...
    def get_table(self, object_list: list[Any]) -> Table: ...
    @cached_property
    def index_url(self) -> str | None: ...
    def get_index_url(self) -> str | None: ...
    @cached_property
    def index_results_url(self) -> str | None: ...
    def get_index_results_url(self) -> str | None: ...
    def get_context_data(self, *args: Any, **kwargs: Any) -> dict[str, Any]: ...
